#lang racket
(require ( planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))

;-----------------------wave----------------------

(define wave2 (beside wave (flip-vert wave)))
(define wave4 (below wave2 wave2))

;-------------------- painter --------------------

(define (flipped-pairs painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)))

(define wave4-2 (flipped-pairs wave))

;----------painters split (2.44 up-split)------------

(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (up-split painter n)
  (if (= n 0) painter
      (let ((smaller (up-split painter (- n 1))))
        (below painter (beside smaller smaller)))))

(define (corner-split painter n)
  (if (= n 0) painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (corner (corner-split painter (- n 1)))
              (bottom-right (below right right)))
         (beside (below painter top-left) (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((corner (corner-split painter n)))
    (let ((half (beside (flip-horiz (corner-split)) corner)))
          (below (flip-vert half) half))))

;--------------manipulate painter operations--------------

(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
          (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (flipped-pairs2 painter)
  (let ((combine4 (square-of-four identity flip-vert
                                  identity flip-vert)))
    (combine4 painter)))

(define (square-limit2 painter n)
  (let ((combine4 (square-of-four flip-horiz identity
                                  rotate180 flip-vert)))
    (combine4 (corner-split painter n))))

(define (split proc1 proc2)
  (lambda (painter n)
    (let ((smaller ((split proc1 proc2) painter (- n 1))))
      (proc1 painter (proc2 smaller smaller)))))

(define right-split2 (split beside below))
(define up-split2 (split below beside))

;---------------------------Frames-----------------------
(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
                           (edge1-frame frame))
               (scale-vect (ycor-vect v)
                           (edge2-frame frame))))))

(define (make-vect x y) (list x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cadr v))

(define (add-vect v1 v2)
  (make-vect (+ (xcor-vect v1) (xcor-vect v2))
             (+ (ycor-vect v1) (ycor-vect v2))))

(define (sub-vect v1 v2)
  (make-vect (- (xcor-vect v1) (xcor-vect v2))
             (- (ycor-vect v1) (ycor-vect v2))))

(define (scale-vect s v)
  (make-vect (* s (xcor-vect v))
             (* s (ycor-vect v))))

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))

(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (caddr f))

;--------------------------Painters----------------------
(define (segment->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
        ((frame-coord-map frame) (start-segment segment))
        ((frame-coord-map frame) (end-segment segment))))
     segment-list)))

(define (make-segment v1 v2) (list v1 v2))
(define (start-segment s) (car s))
(define (end-segment s) (cadr s))

;------------2.49 drawings-----------------

(define (draw-lines frame seglist)
  (let ((tl (edge2-frame frame))
        (tr (add-vect (edge1-frame frame) (edge2-frame frame)))
        (bl (origin-frame frame))
        (br (edge1-frame frame)))
    (let ((tm (scale-vect 0.5 (add-vect tl tr)))
          (bm (scale-vect 0.5 (add-vect bl br)))
          (lm (scale-vect 0.5 (add-vect tl bl)))
          (rm (scale-vect 0.5 (add-vect tr br))))
      (cond ((= seglist "outline") (segment->painter
                                    (list (make-segment tl tr) (make-segment tr br)
                                          (make-segment br bl) (make-segment bl tl))))
            ((= seglist "x") (segment->painter
                              (list (make-segment tl br) (make-segment bl tr))))
            ((= seglist "diamond") (segment->painter
                                    (list (make-segment tm lm) (make-segment lm bm)
                                          (make-segment bm rm) (make-segment rm tm))))))))

;-----test-values-----
; (draw-lines (make-frame (list 0 0) (list 1 0) (list 0 1)) "outline")

;---------------
(define (transform-painter painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
        (painter
         (make-frame new-origin
                     (sub-vect (m corner1) new-origin)
                     (sub-vect (m corner2) new-origin)))))))

(define (shrink-to-upper-right painter)
  (transform-painter painter
                     (make-vect 0.5 0.5) (make-vect 1.0 0.5) (make-vect 0.5 1.0)))







