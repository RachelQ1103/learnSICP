;--------------list-manipulations------------------

(define nil '())
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (enumerate-interval low high)
  (if (> low high) nil
      (cons low (enumerate-interval (+ 1 low) high))))

(define (filter predicate? seq)
  (if (null? seq) nil
      (if (predicate? (car seq))
          (cons (car seq) (filter predicate? (cdr seq)))
          (filter predicate? (cdr seq)))))

;---------queens board-size, all solutions---------

(define (queens board-size)
  (define (queen-cols k)  
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

;-----------board positions-------------------------

(define (adjoin-position new-row k rest-of-queens)
  (append rest-of-queens (list (list new-row k)))

(define empty-board (list '() '()))

;--------------------check safe?---------------------

(define (safe? k positions)
  (define (incheck new rest-of-queens)
    (if (null? rest-of-queens)
          #t
          (if (= new (car rest-of-queens))
              #f
              (incheck new (cdr rest-of-queens)))))
  
  (define (rows positions)
    (map (lambda (board-position) (car board-position))
                    positions))    
    
  (define (cols positions)
    (map (lambda (board-position) (cdr board-position))
                    positions))

  (define (right-diagonal positions)
    (map (lambda (board-position)
           (- (car board-position) (cdr board-position)))
         positions))

  (define (left-diagonal positions)
    (map (lambda (board-position)
           (+ (car board-position) (cdr board-position)))
         positions))

  (define revp (reverse positions))
  
  (not (or (incheck (car (rows revp)) (cdr (rows revp)))
           (incheck (car (rows revp)) (cdr (cols revp)))
           (incheck (car (right-diagonal revp)) (cdr (right-diagonal revp)))
           (incheck (car (left-diagonal revp)) (cdr (left-diagonal revp))))))


  